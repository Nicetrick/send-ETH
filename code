// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract OwnerWithdraw {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    // Модификатор доступа
    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    // Получение средств (fallback и receive)
    receive() external payable {}

    fallback() external payable {}

    // Просмотр баланса контракта
    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }

    // Отправка средств только владельцем
    function withdraw(address payable _to, uint256 _amount) external onlyOwner {
        require(_to != address(0), "Invalid address");
        require(_amount <= address(this).balance, "Insufficient contract balance");

        (bool success, ) = _to.call{value: _amount}("");
        require(success, "Transfer failed");
    }

    // Смена владельца
    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid address");
        owner = newOwner;
    }
}
